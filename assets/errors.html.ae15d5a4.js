import{_ as n,o as s,c as a,b as e}from"./app.cd0b8009.js";const t={},o=e(`<h1 id="errors" tabindex="-1"><a class="header-anchor" href="#errors" aria-hidden="true">#</a> Errors</h1><h2 id="go-s-approach-to-error-handling" tabindex="-1"><a class="header-anchor" href="#go-s-approach-to-error-handling" aria-hidden="true">#</a> Go\u2019s Approach to Error Handling</h2><p>In Go, error handling is explicit and straightforward\u2014there are no exceptions or try/catch blocks like in some other languages. Instead, functions that might fail return an <code>error</code> as an additional return value. The caller then checks this value using simple <code>if</code> statements. This approach has several benefits:</p><ul><li><p><strong>Clarity and Simplicity:</strong><br> Every function call that might fail forces the developer to consider the error case explicitly.</p></li><li><p><strong>No Hidden Control Flow:</strong><br> Errors are not thrown and caught elsewhere in the code, making the program&#39;s flow easier to understand and debug.</p></li><li><p><strong>Better Composability:</strong><br> Functions can be composed more naturally since error handling is part of the function\u2019s return values.</p></li></ul><h3 id="example-of-standard-go-error-handling" tabindex="-1"><a class="header-anchor" href="#example-of-standard-go-error-handling" aria-hidden="true">#</a> Example of Standard Go Error Handling</h3><p>Here\u2019s a short example that demonstrates the typical pattern in Go:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;errors&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// doSomething performs an action that might fail.</span>
<span class="token keyword">func</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// Simulate an error condition.</span>
	<span class="token keyword">if</span> <span class="token boolean">true</span> <span class="token punctuation">{</span> <span class="token comment">// Imagine this condition checks for an error</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;something went wrong&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">otherFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// Handle the error immediately.</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// Continue with the normal flow if no error occurred.</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Success!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the <code>doSomething</code> function returns an error if a problem occurs. In the <code>otherFunction</code> function, we immediately check if an error was returned using an <code>if</code> statement. This pattern is prevalent throughout Go code and encourages writing robust, clear, and maintainable programs.</p><h2 id="error-handling-controllers" tabindex="-1"><a class="header-anchor" href="#error-handling-controllers" aria-hidden="true">#</a> Error Handling Controllers</h2><p>Confetti follows the same idiomatic error handling practices as described above. In Confetti controllers, your handler functions return an error, allowing centralized error management by the framework. This keeps your controllers focused on handling requests while delegating error processing to a central location.</p><h3 id="system-errors-vs-user-errors" tabindex="-1"><a class="header-anchor" href="#system-errors-vs-user-errors" aria-hidden="true">#</a> System Errors vs. User Errors</h3><p>To streamline error handling further, Confetti differentiates between:</p><ul><li><p><strong>System Errors:</strong><br> These represent internal issues that should not expose sensitive information. Use:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>handler<span class="token punctuation">.</span><span class="token function">NewSystemError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&quot;reference&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This wraps the underlying error with a reference string to help trace the issue without revealing details to the end-user.</p></li><li><p><strong>User Errors:</strong><br> These are errors caused by user input or actions, which should provide clear feedback. Use:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>handler<span class="token punctuation">.</span><span class="token function">NewUserError</span><span class="token punctuation">(</span><span class="token string">&quot;Descriptive error message&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This returns a structured error response that can be safely presented to the user.</p></li></ul><h3 id="controller-example" tabindex="-1"><a class="header-anchor" href="#controller-example" aria-hidden="true">#</a> Controller Example</h3><p>Below is an example of a controller in Confetti that demonstrates error handling:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> controllers

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;errors&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;src/internal/pkg/handler&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// ProcessData handles an API request and demonstrates error handling.</span>
<span class="token keyword">func</span> <span class="token function">ProcessData</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// Check for a valid HTTP method.</span>
	<span class="token keyword">if</span> req<span class="token punctuation">.</span>Method <span class="token operator">!=</span> http<span class="token punctuation">.</span>MethodPost <span class="token punctuation">{</span>
		<span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">NewUserError</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid request method; POST required&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusMethodNotAllowed<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Attempt to process data.</span>
	err <span class="token operator">:=</span> <span class="token function">doProcessing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// Return a system error to avoid exposing internal details.</span>
		<span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">NewSystemError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">&quot;processing_error&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Return a successful JSON response if everything is okay.</span>
	<span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">doProcessing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// Simulate a processing error.</span>
	<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;processing failed due to an unexpected issue&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="centralized-error-handling-in-confetti" tabindex="-1"><a class="header-anchor" href="#centralized-error-handling-in-confetti" aria-hidden="true">#</a> Centralized Error Handling in Confetti</h3><p>Confetti centralizes error handling so that any error returned by your controllers is processed consistently in one place. This means you do not need to write repetitive error handling code in each controller, and you can configure logging, error reporting, or custom error responses centrally.</p><blockquote><p>In your controllers, simply return the error, and Confetti\u2019s error handler will manage it according to your configuration.</p></blockquote><p>By following these guidelines, you ensure that your application not only adheres to Go\u2019s best practices for error handling but also benefits from a consistent and maintainable error management strategy within the Confetti framework.</p>`,20),r=[o];function i(p,c){return s(),a("div",null,r)}const u=n(t,[["render",i],["__file","errors.html.vue"]]);export{u as default};
