import{_ as n,o as s,c as a,b as e}from"./app.cd0b8009.js";const t={},o=e(`<h1 id="requests" tabindex="-1"><a class="header-anchor" href="#requests" aria-hidden="true">#</a> Requests</h1><p>This documentation explains how to access and handle HTTP requests using normal Go code. Whether you\u2019re working directly with the standard library or creating a custom request struct for specific needs, these examples will guide you.</p><h2 id="accessing-the-request" tabindex="-1"><a class="header-anchor" href="#accessing-the-request" aria-hidden="true">#</a> Accessing The Request</h2><p>In a typical Go controller, you receive a <code>*http.Request</code> object along with the response writer. This object contains all the information sent by the client\u2014such as cookies, headers, the body, and query parameters.</p><h3 id="example-controller" tabindex="-1"><a class="header-anchor" href="#example-controller" aria-hidden="true">#</a> Example Controller</h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> controller

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// UserShow handles a request by reading a query parameter &quot;name&quot;</span>
<span class="token comment">// and writing a simple HTML response.</span>
<span class="token keyword">func</span> <span class="token function">UserShow</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token comment">// Retrieve a query parameter from the URL.</span>
	name <span class="token operator">:=</span> request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
	
	<span class="token comment">// Write the response.</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;Username: %s&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="accessing-the-request-via-route-closures" tabindex="-1"><a class="header-anchor" href="#accessing-the-request-via-route-closures" aria-hidden="true">#</a> Accessing The Request Via Route Closures</h2><p>Registering a route with a callback instead of a predefined function:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">var</span> ApiRoutes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>handler<span class="token punctuation">.</span>Route<span class="token punctuation">{</span>
	handler<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;POST /users&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    	<span class="token comment">// Retrieve a query parameter from the URL.</span>
    	name <span class="token operator">:=</span> request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
  	
    	<span class="token comment">// Write the response.</span>
    	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;Username: %s&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
    	<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-a-custom-request-struct" tabindex="-1"><a class="header-anchor" href="#using-a-custom-request-struct" aria-hidden="true">#</a> Using a Custom Request Struct</h2><p>If you need a separate request struct for a specific request to simplify validation or processing, you can define your own. For example:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> request

<span class="token comment">// CreateUserRequest defines the expected structure of the incoming JSON payload.</span>
<span class="token keyword">type</span> CreateUserRequest <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name  <span class="token builtin">string</span> <span class="token string">\`json:&quot;name&quot;\`</span>
	Email <span class="token builtin">string</span> <span class="token string">\`json:&quot;email&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, in your controller, decode the request body into this struct:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> controller

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;encoding/json&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;your_project/request&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// CreateUser handles a JSON payload by decoding it into a custom request struct.</span>
<span class="token keyword">func</span> <span class="token function">CreateUser</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> reqData request<span class="token punctuation">.</span>CreateUserRequest

	<span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>reqData<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;Invalid request payload&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Use reqData.Name and reqData.Email as needed.</span>
	response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;User created successfully&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="request-path-method" tabindex="-1"><a class="header-anchor" href="#request-path-method" aria-hidden="true">#</a> Request Path &amp; Method</h2><p>You can access the request path, full URL, and method using the standard <code>*http.Request</code> fields and methods.</p><h3 id="retrieving-the-request-path" tabindex="-1"><a class="header-anchor" href="#retrieving-the-request-path" aria-hidden="true">#</a> Retrieving The Request Path</h3><p>For example, if the URL is <code>http://domain.com/foo/bar</code>, the path can be accessed via:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>path <span class="token operator">:=</span> request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="retrieving-the-request-url" tabindex="-1"><a class="header-anchor" href="#retrieving-the-request-url" aria-hidden="true">#</a> Retrieving The Request URL</h3><p>To get the full URL including the query string:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>fullUrl <span class="token operator">:=</span> request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="retrieving-the-request-method" tabindex="-1"><a class="header-anchor" href="#retrieving-the-request-method" aria-hidden="true">#</a> Retrieving The Request Method</h3><p>The HTTP method is available as:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>method <span class="token operator">:=</span> request<span class="token punctuation">.</span>Method
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="retrieving-input-values" tabindex="-1"><a class="header-anchor" href="#retrieving-input-values" aria-hidden="true">#</a> Retrieving Input Values</h2><h3 id="query-parameters" tabindex="-1"><a class="header-anchor" href="#query-parameters" aria-hidden="true">#</a> Query Parameters</h3><p>Retrieve values from the URL query string:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>name <span class="token operator">:=</span> request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You can also access all query parameters:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>queryParams <span class="token operator">:=</span> request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="form-data" tabindex="-1"><a class="header-anchor" href="#form-data" aria-hidden="true">#</a> Form Data</h3><p>For form submissions (typically via POST), you can parse the form data:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>request<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Always check the error in production code</span>
name <span class="token operator">:=</span> request<span class="token punctuation">.</span>Form<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json-body-data" tabindex="-1"><a class="header-anchor" href="#json-body-data" aria-hidden="true">#</a> JSON Body Data</h3><p>When handling JSON requests, decode the JSON payload into a struct or map:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">var</span> payload <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span> <span class="token string">\`json:&quot;name&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
	http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;Invalid JSON&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="raw-request-body" tabindex="-1"><a class="header-anchor" href="#raw-request-body" aria-hidden="true">#</a> Raw Request Body</h3><p>To get the raw request body as a string:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;io&quot;</span>

bodyBytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
	http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;Error reading body&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
bodyString <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>bodyBytes<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="retrieving-cookies" tabindex="-1"><a class="header-anchor" href="#retrieving-cookies" aria-hidden="true">#</a> Retrieving Cookies</h2><p>Access cookies using the <code>request.Cookie</code> method:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>cookie<span class="token punctuation">,</span> err <span class="token operator">:=</span> request<span class="token punctuation">.</span><span class="token function">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;session_id&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
	<span class="token comment">// handle error or missing cookie</span>
<span class="token punctuation">}</span>
sessionID <span class="token operator">:=</span> cookie<span class="token punctuation">.</span>Value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="files" tabindex="-1"><a class="header-anchor" href="#files" aria-hidden="true">#</a> Files</h2><h3 id="handling-uploaded-files" tabindex="-1"><a class="header-anchor" href="#handling-uploaded-files" aria-hidden="true">#</a> Handling Uploaded Files</h3><p>For file uploads, use <code>request.FormFile</code>:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>file<span class="token punctuation">,</span> header<span class="token punctuation">,</span> err <span class="token operator">:=</span> request<span class="token punctuation">.</span><span class="token function">FormFile</span><span class="token punctuation">(</span><span class="token string">&quot;photo&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
	http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;Error retrieving file&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>
<span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// header.Filename contains the original filename.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion" aria-hidden="true">#</a> Conclusion</h2><p>Using standard Go techniques for handling requests provides you with full control and flexibility. Whether you use the default <code>*http.Request</code> for most operations or create a custom request struct for specific needs, you can easily access query parameters, form data, JSON payloads, cookies, and file uploads. This approach keeps your application straightforward and idiomatic.</p>`,49),p=[o];function i(c,u){return s(),a("div",null,p)}const r=n(t,[["render",i],["__file","requests.html.vue"]]);export{r as default};
