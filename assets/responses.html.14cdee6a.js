import{_ as n,o as s,c as a,b as t}from"./app.cd0b8009.js";const e={},p=t(`<h1 id="responses" tabindex="-1"><a class="header-anchor" href="#responses" aria-hidden="true">#</a> Responses</h1><p>This document explains how to create and manage HTTP responses using idiomatic Go code. In these examples, you&#39;ll see how to set headers, write response bodies, attach cookies, and handle redirects\u2014all using the standard library.</p><p>In idiomatic Go, it is perfectly acceptable to place logic in extra functions\u2014as long as those functions are clear and straightforward. For example, we use a helper function (helper.ToJson) that is simple and can be easily adapted to your needs.</p><p>For JSON responses, we now use a helper function:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> result<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusCreated<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Feel free to customize the <code>handler.ToJson</code> function in <code>media/internal/pkg/handler/response.go</code> or create other response types as needed.</p><h2 id="creating-basic-responses" tabindex="-1"><a class="header-anchor" href="#creating-basic-responses" aria-hidden="true">#</a> Creating Basic Responses</h2><h3 id="simple-string-response" tabindex="-1"><a class="header-anchor" href="#simple-string-response" aria-hidden="true">#</a> Simple String Response</h3><p>For a simple HTML or plain text response, set the appropriate <code>Content-Type</code> header and write the response body:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Index</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token comment">// Set the Content-Type header</span>
    response<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">// Write the HTML string as the response body</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json-response" tabindex="-1"><a class="header-anchor" href="#json-response" aria-hidden="true">#</a> JSON Response</h3><p>To return JSON data, use the helper function. For example, returning a slice as JSON:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">GetNumbers</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    result <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
    <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> result<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusCreated<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="customizing-the-response" tabindex="-1"><a class="header-anchor" href="#customizing-the-response" aria-hidden="true">#</a> Customizing the Response</h2><h3 id="setting-status-codes-and-headers" tabindex="-1"><a class="header-anchor" href="#setting-status-codes-and-headers" aria-hidden="true">#</a> Setting Status Codes and Headers</h3><p>You can set custom HTTP status codes and add multiple headers before writing the response body:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Home</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token comment">// Set custom headers</span>
    response<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span>
    response<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;X-Custom-Header&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Header Value&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">// Write the HTTP status code (must be set before writing the body)</span>
    response<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">)</span>
    <span class="token comment">// Write the response body</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="attaching-multiple-headers" tabindex="-1"><a class="header-anchor" href="#attaching-multiple-headers" aria-hidden="true">#</a> Attaching Multiple Headers</h3><p>Simply call <code>Header().Set</code> for each header you need to add:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">CoolStuff</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/markdown; charset=UTF-8&quot;</span><span class="token punctuation">)</span>
    response<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;X-Header-One&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Header Value&quot;</span><span class="token punctuation">)</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;# Cool Stuff&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="attaching-cookies" tabindex="-1"><a class="header-anchor" href="#attaching-cookies" aria-hidden="true">#</a> Attaching Cookies</h3><p>Use the standard <code>http.SetCookie</code> function to attach cookies to the response:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">SetCookieExample</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    cookie <span class="token operator">:=</span> http<span class="token punctuation">.</span>Cookie<span class="token punctuation">{</span>
        Name<span class="token punctuation">:</span>  <span class="token string">&quot;request_id&quot;</span><span class="token punctuation">,</span>
        Value<span class="token punctuation">:</span> <span class="token string">&quot;aGdsf89hA3jr2&quot;</span><span class="token punctuation">,</span>
        <span class="token comment">// Optionally add Path, Domain, etc.</span>
    <span class="token punctuation">}</span>
    http<span class="token punctuation">.</span><span class="token function">SetCookie</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cookie<span class="token punctuation">)</span>
    response<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;Cookie has been set&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="redirects" tabindex="-1"><a class="header-anchor" href="#redirects" aria-hidden="true">#</a> Redirects</h2><h3 id="temporary-and-permanent-redirects" tabindex="-1"><a class="header-anchor" href="#temporary-and-permanent-redirects" aria-hidden="true">#</a> Temporary and Permanent Redirects</h3><p>Redirects in Go are handled using <code>http.Redirect</code>, which sets the appropriate headers and status code:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Dashboard</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token comment">// Permanent redirect to &quot;/home/dashboard&quot;</span>
    http<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token string">&quot;/home/dashboard&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusPermanentRedirect<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Login</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token comment">// Temporary redirect to &quot;/under_construction&quot;</span>
    http<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token string">&quot;/under_construction&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusFound<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redirecting-to-external-domains" tabindex="-1"><a class="header-anchor" href="#redirecting-to-external-domains" aria-hidden="true">#</a> Redirecting to External Domains</h3><p>To redirect to an external URL, simply specify the full URL:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">RedirectExternal</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    http<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token string">&quot;https://github.com/confetti-framework&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusFound<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="other-response-types" tabindex="-1"><a class="header-anchor" href="#other-response-types" aria-hidden="true">#</a> Other Response Types</h2><h3 id="json-response-with-a-map" tabindex="-1"><a class="header-anchor" href="#json-response-with-a-map" aria-hidden="true">#</a> JSON Response with a Map</h3><p>Here&#39;s an example of returning JSON data using a map:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">JSONResponse</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    data <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>
        <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span>  <span class="token string">&quot;abigail&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;state&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;CA&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> data<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusCreated<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Note:</strong> Feel free to customize the <code>handler.ToJson</code> function in <code>media/internal/pkg/handler/response.go</code> or create other response types as needed.</p></blockquote><h3 id="json-resource" tabindex="-1"><a class="header-anchor" href="#json-resource" aria-hidden="true">#</a> JSON Resource</h3><p>You can also define a struct to represent your data and return it as JSON:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token comment">// UserResource represents the JSON structure for a user.</span>
<span class="token keyword">type</span> UserResource <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Name  <span class="token builtin">string</span> <span class="token string">\`json:&quot;name&quot;\`</span>
    State <span class="token builtin">string</span> <span class="token string">\`json:&quot;state&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">StructJSONResponse</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    user <span class="token operator">:=</span> UserResource<span class="token punctuation">{</span>
        Name<span class="token punctuation">:</span>  <span class="token string">&quot;abigail&quot;</span><span class="token punctuation">,</span>
        State<span class="token punctuation">:</span> <span class="token string">&quot;CA&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">ToJson</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> user<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusCreated<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rendering-a-view-template" tabindex="-1"><a class="header-anchor" href="#rendering-a-view-template" aria-hidden="true">#</a> Rendering a View (Template)</h3><p>To render an HTML view using Go templates, parse and execute the template, writing the output directly to the response:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;html/template&quot;</span>
    <span class="token string">&quot;net/http&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">HomePage</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    response<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span>
    tmpl<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;homepage&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;Hello, {{.}}&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;Template error&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> tmpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;James&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="file-downloads" tabindex="-1"><a class="header-anchor" href="#file-downloads" aria-hidden="true">#</a> File Downloads</h3><p>For file downloads, set the <code>Content-Disposition</code> header to force a download and use <code>http.ServeFile</code>:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Download</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    filePath <span class="token operator">:=</span> <span class="token string">&quot;path/to/file.pdf&quot;</span>
    <span class="token comment">// Set the header to force download with a custom filename</span>
    response<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Disposition&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;attachment; filename=\\&quot;label.pdf\\&quot;&quot;</span><span class="token punctuation">)</span>
    response<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/pdf&quot;</span><span class="token punctuation">)</span>
    http<span class="token punctuation">.</span><span class="token function">ServeFile</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> request<span class="token punctuation">,</span> filePath<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="streamed-downloads" tabindex="-1"><a class="header-anchor" href="#streamed-downloads" aria-hidden="true">#</a> Streamed Downloads</h3><p>To generate a download from in-memory content without writing a file to disk:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">StreamedDownload</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    content <span class="token operator">:=</span> <span class="token string">&quot;%PDF-1.5&quot;</span>
    response<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Disposition&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;attachment; filename=\\&quot;labels.pdf\\&quot;&quot;</span><span class="token punctuation">)</span>
    response<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/pdf&quot;</span><span class="token punctuation">)</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="show-file-in-browser" tabindex="-1"><a class="header-anchor" href="#show-file-in-browser" aria-hidden="true">#</a> Show File in Browser</h3><p>To display a file (e.g., a PDF) directly in the browser without forcing a download, set the <code>Content-Disposition</code> to inline:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ShowInBrowser</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    content <span class="token operator">:=</span> <span class="token string">&quot;%PDF-1.5&quot;</span>
    response<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Disposition&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;inline&quot;</span><span class="token punctuation">)</span>
    response<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/pdf&quot;</span><span class="token punctuation">)</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50),o=[p];function c(i,u){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","responses.html.vue"]]);export{r as default};
