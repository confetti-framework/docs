import{_ as n,o as s,c as a,b as e}from"./app.cd0b8009.js";const t={},p=e(`<h1 id="routing" tabindex="-1"><a class="header-anchor" href="#routing" aria-hidden="true">#</a> Routing</h1><p>This documentation explains how to handle HTTP requests in Confetti Framework using standard Go techniques and the built-in routing system with <code>handler.New()</code>. This provides full control over routes and middleware without external libraries.</p><h2 id="defining-routes" tabindex="-1"><a class="header-anchor" href="#defining-routes" aria-hidden="true">#</a> Defining Routes</h2><p>Routes are defined using <code>handler.New(&quot;METHOD PATH&quot;, handlerFunc)</code>. Middleware can be added via <code>.AppendMiddleware()</code>.</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example:</h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">var</span> ApiRoutes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>handler<span class="token punctuation">.</span>Route<span class="token punctuation">{</span>
	handler<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;GET /ping&quot;</span><span class="token punctuation">,</span> ping<span class="token punctuation">.</span>Index<span class="token punctuation">)</span><span class="token punctuation">,</span>
	handler<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;GET /status&quot;</span><span class="token punctuation">,</span> status<span class="token punctuation">.</span>Index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AppendMiddleware</span><span class="token punctuation">(</span>middleware<span class="token punctuation">.</span>AuthMiddleware<span class="token punctuation">{</span>Permission<span class="token punctuation">:</span> <span class="token string">&quot;Show status&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>GET /ping</code> route is added without middleware, while the <code>GET /status</code> route requires authentication with the appropriate permission.</p><h2 id="controller-structure" tabindex="-1"><a class="header-anchor" href="#controller-structure" aria-hidden="true">#</a> Controller Structure</h2><p>Controllers must use the following function signature:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Index</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token comment">// Processing logic here</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters:</h3><ul><li><strong>response</strong>: The <code>http.ResponseWriter</code> used to write the response.</li><li><strong>request</strong>: The <code>*http.Request</code> containing the incoming request.</li><li><strong>error</strong>: Returns an error if a problem occurs.</li></ul><h2 id="enhanced-routing-patterns" tabindex="-1"><a class="header-anchor" href="#enhanced-routing-patterns" aria-hidden="true">#</a> Enhanced Routing Patterns</h2><p>The Go 1.22+ routing system allows for more expressive patterns:</p><h3 id="method-specific-routes" tabindex="-1"><a class="header-anchor" href="#method-specific-routes" aria-hidden="true">#</a> Method-Specific Routes</h3><p>Routes can be defined with HTTP methods for stricter matching. For example, <code>POST /items/create</code> ensures only <code>POST</code> requests are allowed for that route.</p><h3 id="wildcard-parameters" tabindex="-1"><a class="header-anchor" href="#wildcard-parameters" aria-hidden="true">#</a> Wildcard Parameters</h3><ul><li><code>{param}</code> captures a single path segment and can be retrieved using <code>request.PathValue(&quot;param&quot;)</code>.</li><li><code>{param...}</code> matches multiple segments at the end of a path.</li></ul><p>Example:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ShowFile</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    filePath <span class="token operator">:=</span> request<span class="token punctuation">.</span><span class="token function">PathValue</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;File path: %s&quot;</span><span class="token punctuation">,</span> filePath<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For the route <code>GET /files/{path...}</code>, <code>path</code> captures all remaining segments.</p><h3 id="exact-matches" tabindex="-1"><a class="header-anchor" href="#exact-matches" aria-hidden="true">#</a> Exact Matches</h3><p>To ensure an exact match with a trailing slash, use <code>{$}</code>:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code>handler<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;GET /users/{$}&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>List<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="working-with-route-parameters" tabindex="-1"><a class="header-anchor" href="#working-with-route-parameters" aria-hidden="true">#</a> Working with Route Parameters</h2><h3 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example:</h3><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ShowUser</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    userID <span class="token operator">:=</span> request<span class="token punctuation">.</span><span class="token function">PathValue</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;User ID: %s&quot;</span><span class="token punctuation">,</span> userID<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For a route like <code>GET /users/{id}</code>, the <code>{id}</code> value is retrieved using <code>request.PathValue(&quot;id&quot;)</code>.</p><h2 id="query-parameters" tabindex="-1"><a class="header-anchor" href="#query-parameters" aria-hidden="true">#</a> Query Parameters</h2><p>Query parameters can be extracted directly from the <code>*http.Request</code>:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Search</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    query <span class="token operator">:=</span> request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;q&quot;</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;Search results for: %s&quot;</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="redirects" tabindex="-1"><a class="header-anchor" href="#redirects" aria-hidden="true">#</a> Redirects</h2><p>To implement a redirect in an idiomatic Go way:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">RedirectToHome</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    http<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token string">&quot;/home&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusFound<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="regular-expression-constraints" tabindex="-1"><a class="header-anchor" href="#regular-expression-constraints" aria-hidden="true">#</a> Regular Expression Constraints</h2><p>Regular expressions can be used in routes to validate parameters. Example:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">var</span> ApiRoutes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>handler<span class="token punctuation">.</span>Route<span class="token punctuation">{</span>
    handler<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;GET /product/{id:[0-9]+}&quot;</span><span class="token punctuation">,</span> product<span class="token punctuation">.</span>Show<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, <code>{id}</code> is restricted to numeric values (<code>[0-9]+</code>).</p><h2 id="form-data" tabindex="-1"><a class="header-anchor" href="#form-data" aria-hidden="true">#</a> Form Data</h2><p>To process form submissions, first parse the form data:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">ProcessForm</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    request<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    name <span class="token operator">:=</span> request<span class="token punctuation">.</span>Form<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;Received name: %s&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="raw-request-body" tabindex="-1"><a class="header-anchor" href="#raw-request-body" aria-hidden="true">#</a> Raw Request Body</h2><p>To read the raw request body:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;io&quot;</span>

<span class="token keyword">func</span> <span class="token function">ReadBody</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    bodyBytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;Error reading body&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>
    bodyString <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>bodyBytes<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;Request body: %s&quot;</span><span class="token punctuation">,</span> bodyString<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="handling-cookies" tabindex="-1"><a class="header-anchor" href="#handling-cookies" aria-hidden="true">#</a> Handling Cookies</h2><p>Retrieve cookies using:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">GetSessionCookie</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    cookie<span class="token punctuation">,</span> err <span class="token operator">:=</span> request<span class="token punctuation">.</span><span class="token function">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;session_id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;Session cookie missing&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusUnauthorized<span class="token punctuation">)</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;Session ID: %s&quot;</span><span class="token punctuation">,</span> cookie<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="handling-file-uploads" tabindex="-1"><a class="header-anchor" href="#handling-file-uploads" aria-hidden="true">#</a> Handling File Uploads</h2><p>For file uploads, use <code>request.FormFile()</code>:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">UploadFile</span><span class="token punctuation">(</span>response http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> request <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    file<span class="token punctuation">,</span> header<span class="token punctuation">,</span> err <span class="token operator">:=</span> request<span class="token punctuation">.</span><span class="token function">FormFile</span><span class="token punctuation">(</span><span class="token string">&quot;photo&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;Error retrieving file&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>
    <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">&quot;Uploaded file: %s&quot;</span><span class="token punctuation">,</span> header<span class="token punctuation">.</span>Filename<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50),o=[p];function i(c,u){return s(),a("div",null,o)}const r=n(t,[["render",i],["__file","routing.html.vue"]]);export{r as default};
