import{_ as e,r as o,o as i,c,a as s,d as p,b as a,e as n}from"./app.cd0b8009.js";const u={},r=a('<h1 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h1><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>All the configuration files for the Confetti framework are stored in the <code>config</code> directory. Each option is documented, so feel free to look through the files and get familiar with the options available to you.</p><p>These configuration files allow you to configure things like your database connection, mail server, application timezone, encryption key, and other core settings.</p><h2 id="environment-configuration" tabindex="-1"><a class="header-anchor" href="#environment-configuration" aria-hidden="true">#</a> Environment Configuration</h2><p>It is common to have different configuration values based on the environment where the application is running. For example, you might use a different cache driver locally than you do in production.</p>',6),l=n("To simplify this process, you can use the "),d={href:"https://github.com/joho/godotenv",target:"_blank",rel:"noopener noreferrer"},v=n("GoDotEnv"),h=n(" library. In a fresh Confetti installation, you will find a "),k=s("code",null,".env.example",-1),f=n(" file in the root directory. Copy this file to "),g=s("code",null,".env",-1),m=n(" and adjust the values as needed for your environment."),b=a(`<h2 id="configuration-definition" tabindex="-1"><a class="header-anchor" href="#configuration-definition" aria-hidden="true">#</a> Configuration Definition</h2><p>Instead of using a loosely defined configuration, it is recommended to define configuration values in a type-safe manner. For example, to configure the application server settings, use the following approach:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token keyword">package</span> config

<span class="token keyword">import</span> <span class="token string">&quot;time&quot;</span>

<span class="token comment">// AppServe holds the configuration settings for the application server.</span>
<span class="token keyword">var</span> AppServe <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Ssl     <span class="token builtin">bool</span>
	Host    <span class="token builtin">string</span>
	Port    <span class="token builtin">int</span>
	Timeout time<span class="token punctuation">.</span>Duration
<span class="token punctuation">}</span><span class="token punctuation">{</span>
	Ssl<span class="token punctuation">:</span>     <span class="token function">EnvBoolOr</span><span class="token punctuation">(</span><span class="token string">&quot;APP_SSL&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	Host<span class="token punctuation">:</span>    <span class="token function">EnvStringOr</span><span class="token punctuation">(</span><span class="token string">&quot;APP_HOST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	Port<span class="token punctuation">:</span>    <span class="token function">EnvIntOr</span><span class="token punctuation">(</span><span class="token string">&quot;APP_PORT&quot;</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	Timeout<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token function">EnvIntOr</span><span class="token punctuation">(</span><span class="token string">&quot;APP_TIMEOUT&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This method ensures that configuration values are strictly typed and that default values are provided when environment variables are missing.</p><h3 id="retrieving-environment-configuration" tabindex="-1"><a class="header-anchor" href="#retrieving-environment-configuration" aria-hidden="true">#</a> Retrieving Environment Configuration</h3><p>Use the helper functions to retrieve the values, ensuring type safety and allowing for default values:</p><div class="language-go ext-go line-numbers-mode"><pre class="language-go"><code><span class="token function">EnvString</span><span class="token punctuation">(</span><span class="token string">&quot;APP_URL&quot;</span><span class="token punctuation">)</span>
<span class="token function">EnvStringOr</span><span class="token punctuation">(</span><span class="token string">&quot;APP_URL&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost&quot;</span><span class="token punctuation">)</span>
<span class="token function">EnvBool</span><span class="token punctuation">(</span><span class="token string">&quot;DEBUG&quot;</span><span class="token punctuation">)</span>
<span class="token function">EnvBoolOr</span><span class="token punctuation">(</span><span class="token string">&quot;DEBUG&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token function">EnvIntOr</span><span class="token punctuation">(</span><span class="token string">&quot;APP_PORT&quot;</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span>

The second parameter in functions like EnvStringOr or EnvBoolOr is the <span class="token keyword">default</span> value to use <span class="token keyword">if</span> the environment variable is not set<span class="token punctuation">.</span>

## Accessing Configuration Values

Retrieving a configuration value is straightforward and benefits from IDE autocompletion thanks to strict typing<span class="token punctuation">:</span>

<span class="token string">\`\`</span>\`<span class="token keyword">go</span>
config<span class="token punctuation">.</span>AppServe<span class="token punctuation">.</span>Host
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="configuration-caching" tabindex="-1"><a class="header-anchor" href="#configuration-caching" aria-hidden="true">#</a> Configuration Caching</h2><p>Configuration is built at startup when you run your application, so manual caching of configuration values is not necessary.</p>`,9);function _(y,q){const t=o("ExternalLinkIcon");return i(),c("div",null,[r,s("p",null,[l,s("a",d,[v,p(t)]),h,k,f,g,m]),b])}const P=e(u,[["render",_],["__file","configuration.html.vue"]]);export{P as default};
